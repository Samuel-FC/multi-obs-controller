"use strict";(self.webpackChunkmulti_obs_controller_docs=self.webpackChunkmulti_obs_controller_docs||[]).push([[938],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,p=d["".concat(c,".").concat(h)]||d[h]||f[h]||o;return n?a.createElement(p,i(i({ref:t},u),{},{components:n})):a.createElement(p,i({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},i="Understanding states",s={unversionedId:"states",id:"states",title:"Understanding states",description:"Key status and feedback",source:"@site/docs/states.md",sourceDirName:".",slug:"/states",permalink:"/multi-obs-controller/docs/states",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Configuration",permalink:"/multi-obs-controller/docs/configuration"},next:{title:"stream",permalink:"/multi-obs-controller/docs/actions/stream"}},c={},l=[{value:"Key status and feedback",id:"key-status-and-feedback",level:2}],u={toc:l},d="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"understanding-states"},"Understanding states"),(0,r.kt)("h2",{id:"key-status-and-feedback"},"Key status and feedback"),(0,r.kt)("p",null,"The plugin notifies the status and success/error of an action via key images color codes and feedback icons after pressing a key."),(0,r.kt)("p",null,"For actions that are associated with a particular on or off state (e.g. stream, record, currrent scene), the key image is colored to live show such state in every target OBS instance of the action. That is, if the target is a single OBS instance, the key image will either have a bright background color (on) or a dark one (off), in the same style as any other Stream Deck plugin action with states. Otherwise, if the target is multiple the key image will be vertically divided in sections corresponding to each OBS instance. These sections will follow the same color-code as before: bright for on state, dark for off state. This way it can be easily checked that all instances are in the expected states. There is a third color-code for the state, shown as a pattern of gray vertical lines, that indicates that the corresponding OBS instance is disconnected, or in some cases that the action settings are invalid."),(0,r.kt)("p",null,"For actions without states (e.g. trigger hotkey, raw/raw batch requests), the key image isn't updated. However, after successfully triggering an action by pressing the key, a checkmark icon overlay will be shown."),(0,r.kt)("p",null,"For all actions, if the action fails or success only partially, an alert triangle will be shown after pressing the key. Take into account that such alert will appear if:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The action is sent to a single OBS instance and it fails."),(0,r.kt)("li",{parentName:"ul"},"The action is sent to multiple OBS instances but the WS server of one of them is not connected/reachable. The action may have succeeded in other instances."),(0,r.kt)("li",{parentName:"ul"},"The action is sent to multiple OBS instances but failed in one of them. The action may have succeeded in other instances.")),(0,r.kt)("p",null,"If you decide to substitute the default action images with custom ones, be aware that the action will only be set to on when it is on in every target instance of the action. That means that if for some reason one of the targets is disconnected, or the state in it is off, the internal Stream Deck state will be off and so will be your custom image choice."))}f.isMDXComponent=!0}}]);